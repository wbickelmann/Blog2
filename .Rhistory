gss.race<-gss%>%
select(helpnot,race,year)%>%
filter(!is.na(helpnot), year>1999)
library(ggplot2)
library(dplyr)
library(statsr)
load("gss.Rdata")
str(gss)
gss.race<-gss%>%
select(helpnot,race,year)%>%
filter(!is.na(helpnot), year>1999)
gss.degree<-gss%>%
select(degree,marital,year)%>%
filter(!is.na(degree), !is.na(marital), year>1999)
gss.income<-gss%>%
select(incom16,childs,year)%>%
filter(!is.na(incom16), !is.na(childs), year>1999)
ggplot(gss.race, aes(x=helpnot, y=race, fill=race)) + geom_bar(stat="identity") + xlab("More or Less Government") + ggtitle("Opinion on Government Role by Race", subtitle = NULL)
ggplot(gss.degree, aes(x=degree, y=marital, fill=marital)) + geom_bar(stat="identity") + xlab("Degree Type") +ylab("Number of Degree Holders") + ggtitle("Marital Status by Degree", subtitle = NULL)
ggplot(gss.income, aes(x = incom16, y = childs)) +
geom_boxplot() + xlab("Income Level") + ylab("Number of Children")
two.table.race.chi<-chisq.test(two.table.race)
two.table.degree<-table(gss.degree$degree,gss.degree$marital)
print(two.table.degree)
two.table.race<-table(gss.race$helpnot,gss$race)
two.table.degree<-table(gss.degree$degree,gss.degree$marital)
print(two.table.degree)
two.table.race<-table(gss.race$helpnot,gss.race$race)
print(two.table.race)
child.model<-lm(childs ~ incom16, data=gss.income)
summary(child.model)
two.table.race.chi<-chisq.test(two.table.race)
print(two.table.race.chi)
two.table.degree.chi<-chisq.test(two.table.degree)
print(two.table.degree.chi)
child.sig<-anova(child.model)
print(child.sig)
significance.test<-function(x)
if(x$p.value>.01){
print("Fail to reject null hypothesis")
}else if(x$p.value<.01){
print("Reject null hypothesis in favor of Alternative Hypothesis")
}
significance.test(two.table.race.chi)
significance.test(two.table.degree.chi)
significance.test(child.sig)
two.table.race.chi<-chisq.test(two.table.race)
print(two.table.race.chi)
two.table.degree.chi<-chisq.test(two.table.degree)
print(two.table.degree.chi)
child.sig<-anova(child.model)
child.sig$p.value<-child.sig$`Pr(>F)`
print(child.sig)
significance.test<-function(x)
if(x$p.value>.01){
print("Fail to reject null hypothesis")
}else if(x$p.value<.01){
print("Reject null hypothesis in favor of Alternative Hypothesis")
}
significance.test(two.table.race.chi)
significance.test(two.table.degree.chi)
significance.test(child.sig)
library(MASS);
library(caret)
owells <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/Howells.csv', as.is = T);
attach(Howells);
# this time get ALL predictors
HBNMF <- Howells[which(Pop == 'NORSE' | Pop == 'BERG'),];
# many columns are Nas
H4A <- na.omit(HBNMF[,c(5:61,63,67:80)])
H4A$PopSex <- as.factor(H4A$PopSex)
table(H4A$PopSex)
BERGF BERGM NORSEF NORSEM
53 56 55 55
Howells <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/Howells.csv', as.is = T);
x<-sample(1:200,200)
length(which(x>=160))
detach(MASS::select)
knitr::opts_chunk$set(echo = TRUE)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
install.packages("KernelKnn")
install.packages("ks")
install.packages("class")
library(class)
library(KernelKnn)
library(ks)
library(caret)
sahdd_kern <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 7, regression = FALSE, Levels = unique(y), method = 'euclidean')
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.k<-sahdd
sahdd.k$chd<-sahdd.k$chd +1
x<-sahdd.k[-10]
y<-sahdd.k$chd
table(y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 7, regression = FALSE, Levels = unique(y), method = 'euclidean')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
Classinto
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
Classinto
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'Minkowski',weights_function = 'exponential')
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
Classinto
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
Classinto
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
Classinto
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
sahdd.kn$chd<-sahdd$chd +1
x<-sahdd.kn[-10]
y<-sahdd.kn$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
summary(outKNN)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
knitr::opts_chunk$set(echo = TRUE)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
install.packages("KernelKnn")
install.packages("ks")
install.packages("class")
library(class)
library(KernelKnn)
library(ks)
library(caret)
install.packages("KernelKnn")
install.packages("ks")
install.packages("class")
install.packages("class")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.n <- as.data.frame(lapply(sahdd[1:10], normalize))
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 5, prob = TRUE)
sahdd_train.kn<-sahdd.n[-10]
sahdd_train_labels.kn<-sahdd$chd
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 5, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels)
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 5, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 11, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 11, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 19, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.k<-sahdd
sahdd.k$chd<-sahdd.k$chd +1
x<-sahdd.k[-10]
y<-sahdd.k$chd
table(y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
Classinto
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
sahdd.kn$chd<-sahdd$chd +1
x<-sahdd.kn[-10]
y<-sahdd.kn$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
knitr::opts_chunk$set(echo = TRUE)
logit<-glm(as.factor(chd) ~ tobacco + adiposity + famhist + typea + obesity + age + ldl,  family = binomial(), data = sahdd)
summary(logit)
logit2<-fitted(logit)
logit.class<-cut(logit2,  breaks=c(-Inf, .5, Inf),labels=c(0,1))
confusionMatrix(logit.class,sahdd$chd)
logit<-glm(as.factor(chd) ~ tobacco + famhist + typea + obesity + age + ldl,  family = binomial(), data = sahdd)
summary(logit)
logit2<-fitted(logit)
logit.class<-cut(logit2,  breaks=c(-Inf, .5, Inf),labels=c(0,1))
confusionMatrix(logit.class,sahdd$chd)
logit<-glm(as.factor(chd) ~ tobacco + famhist + typea + age + ldl,  family = binomial(), data = sahdd)
summary(logit)
logit2<-fitted(logit)
logit.class<-cut(logit2,  breaks=c(-Inf, .5, Inf),labels=c(0,1))
confusionMatrix(logit.class,sahdd$chd)
ldfa<-lda(chd ~ sbp + tobacco + adiposity + famhist + typea + obesity + alcohol + age + ldl, data = sahdd,CV = T, priors = c(1,1))
library(caret)
library(MASS)
ldfa<-lda(chd ~ sbp + tobacco + adiposity + famhist + typea + obesity + alcohol + age + ldl, data = sahdd,CV = T, priors = c(1,1))
summary(ldfa)
ldfa$scaling
confusionMatrix(ldfa$class, sahdd$chd)
logit<-glm(as.factor(chd) ~ famhist + tobacco + age ,data = sahdd, family = binomial())
summary(logit)
logit2<-fitted(logit)
logit.class<-cut(logit2,  breaks=c(-Inf, .5, Inf),labels=c(0,1))
confusionMatrix(logit.class,sahdd$chd)
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.n <- as.data.frame(lapply(sahdd[1:10], normalize))
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.n <- as.data.frame(lapply(sahdd[1:10], normalize))
sahdd_train.kn<-sahdd.n[-10]
sahdd_train_labels.kn<-sahdd$chd
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 1, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 1, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 5, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 11, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 19, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.k<-sahdd
sahdd.k$chd<-sahdd.k$chd +1
x<-sahdd.k[-10]
y<-sahdd.k$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
sahdd.kn$chd<-sahdd$chd +1
x<-sahdd.kn[-10]
y<-sahdd.kn$chd
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
sahdd.kn$chd<-sahdd$chd +1
x<-sahdd.kn[-10]
y<-sahdd.kn$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
sahdd_test_pred
sahdd_test_pred
knitr::opts_chunk$set(echo = TRUE)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
install.packages("KernelKnn")
install.packages("ks")
install.packages("class")
library(class)
library(KernelKnn)
library(ks)
library(caret)
install.packages("KernelKnn")
install.packages("ks")
install.packages("class")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
install.packages("class")
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.n <- as.data.frame(lapply(sahdd[1:10], normalize))
sahdd_train.kn<-sahdd.n[-10]
sahdd_train_labels.kn<-sahdd$chd
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 1, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.n <- as.data.frame(lapply(sahdd[1:10], normalize))
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.n <- as.data.frame(lapply(sahdd[1:10], normalize))
sahdd_train.kn<-sahdd.n[-10]
sahdd_train_labels.kn<-sahdd$chd
sahdd_test_pred <-knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 5, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 11, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd_test_pred <- knn.cv(sahdd_train.kn, sahdd_train_labels.kn, k = 19, prob = TRUE)
confusionMatrix(sahdd_test_pred,sahdd_train_labels.kn)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.k<-sahdd
sahdd.k$chd<-sahdd.k$chd +1
x<-sahdd.k[-10]
y<-sahdd.k$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 5, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.k<-sahdd
sahdd.k$chd<-sahdd.k$chd +1
x<-sahdd.k[-10]
y<-sahdd.k$chd
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
sahdd.kn$chd<-sahdd$chd +1
x<-sahdd.kn[-10]
y<-sahdd.kn$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 19, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
sahdd <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/sahdd.csv', as.is = T);
sahdd<-sahdd[-1]
sahdd$famhist<-as.numeric(sahdd$famhist == "Present")
sahdd.kn <- as.data.frame(lapply(sahdd[1:9], normalize))
sahdd.kn$chd<-sahdd$chd +1
x<-sahdd.kn[-10]
y<-sahdd.kn$chd
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 5, regression = FALSE, Levels = unique(y), method = 'euclidean',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 5, regression = FALSE, Levels = unique(y), method = 'minkowski',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
outKNN <- KernelKnn(x, TEST_data = NULL, as.numeric(y), k = 5, regression = FALSE, Levels = unique(y), method = 'mahalanobis',weights_function = 'exponential')
Classinto <- c(0,0,0)
for (i in seq(length(y)))
{ Classinto[i] <- match(1,match(outKNN[i,], max(outKNN[i,])))
}
confusionMatrix(Classinto,y)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
library(dplyr)
library(ggplot)
library(ggiraph)
Batting%>%
group_by(playerID)%>%
summarize(Career_HR=sum(HR),Career_SO=sum(SO))%>%
filter(Career_HR>=400)->df
HR_vs_SO<-inner_join(df,Master,by=c("playerID"))%>%
select(nameFirst,nameLast,Career_HR,Career_SO)
#----------------------------------------------------------------------------------
g<-ggplot()+
geom_point(data=HR_vs_SO, aes(x=Career_SO,y=Career_HR, tooltip=nameLast)) +
ggtitle("Career Homeruns vs. Strikeouts for Great Hitters") +
xlab("Strikeouts") +
ylab("Homeruns")
ggiraph(code=print(g),hover_css="fill:white;stroke:black")
setwd("~/")
setwd("~/Blog2")
library(devtools)
install_github('rstudio/blogdown')
blogdown::install_hugo()
blogdown::new_site(theme="matcornic/hugo-theme-learn")
blogdown::serve_site()
library(devtools)
install_github('rstudio/blogdown')
blogdown::install_hugo()
blogdown::new_site(theme= "matcornic/hugo-theme-learn")
blogdown::serve_site()
library(devtools)
install_github('rstudio/blogdown')
blogdown::install_hugo()
blogdown::new_site(theme="chipsenkbeil/grid-side")
blogdown::serve_site()
blogdown::new_site(theme="chipsenkbeil/grid-side")
blogdown::new_site(theme="matcornic/hugo-theme-learn")
blogdown::serve_site()
install_github('rstudio/blogdown')
blogdown::install_hugo()
blogdown::new_site(theme= "mdhender/nixon")
knitr::opts_chunk$set(collapse = TRUE)
plot(density(rnorm(200)))
plot(density(rnorm(2000)))
blogdown::serve_site()
plot(density(rnorm(5000)))
plot(density(rnorm(30)))
blogdown::serve_site()
plot(density(10*rnorm(30)))
plot(density(rnorm(300)))
blogdown::serve_site()
blogdown::serve_site()
